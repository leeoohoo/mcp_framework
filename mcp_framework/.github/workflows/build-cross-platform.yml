name: MCP Framework Cross-Platform Build

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_platform:
        description: 'Platform to build for (native, linux, windows, all)'
        required: false
        default: 'native'
        type: choice
        options:
        - native
        - linux
        - windows
        - all

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            python-version: '3.11'
          # Windows x86_64
          - os: windows-latest
            platform: windows
            arch: x86_64
            python-version: '3.11'
          # macOS Intel x86_64
          - os: macos-13
            platform: macos
            arch: x86_64
            python-version: '3.11'
          # macOS Apple Silicon ARM64 (M1/M2)
          - os: macos-latest
            platform: macos
            arch: arm64
            python-version: '3.11'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install MCP Framework in development mode
      run: |
        pip install -e .
    
    - name: Run tests
      run: |
        python test_package.py
    
    - name: Create test server for building
      run: |
        echo 'import asyncio' > test_build_server.py
        echo 'from mcp_framework import MCPServer' >> test_build_server.py
        echo '' >> test_build_server.py
        echo 'class TestServer(MCPServer):' >> test_build_server.py
        echo '    def __init__(self):' >> test_build_server.py
        echo '        super().__init__("test-server", "1.0.0")' >> test_build_server.py
        echo '' >> test_build_server.py
        echo 'def main():' >> test_build_server.py
        echo '    server = TestServer()' >> test_build_server.py
        echo '    server.run()' >> test_build_server.py
        echo '' >> test_build_server.py
        echo 'if __name__ == "__main__":' >> test_build_server.py
        echo '    main()' >> test_build_server.py
    
    - name: Build executables using mcp-build
      run: |
        mcp-build --platform native --server test_build_server.py --no-test
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mcp-framework-${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/
        retention-days: 30
    
    - name: List built files
      run: |
        echo "Built files for ${{ matrix.platform }}-${{ matrix.arch }}:"
        ls -la dist/
  
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          mcp-framework-linux-x86_64/**/*
          mcp-framework-windows-x86_64/**/*
          mcp-framework-macos-x86_64/**/*
          mcp-framework-macos-arm64/**/*
        draft: false
        prerelease: false
        body: |
          ## MCP Framework Release
          
          This release includes cross-platform builds for:
          - Linux x86_64
          - Windows x86_64  
          - macOS Intel (x86_64)
          - macOS Apple Silicon (ARM64/M1/M2)
          
          ### Usage
          Download the appropriate build for your platform and extract the archive.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Install MCP Framework
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Create test server for Docker build
      run: |
        echo 'import asyncio' > test_docker_server.py
        echo 'from mcp_framework import MCPServer' >> test_docker_server.py
        echo '' >> test_docker_server.py
        echo 'class TestDockerServer(MCPServer):' >> test_docker_server.py
        echo '    def __init__(self):' >> test_docker_server.py
        echo '        super().__init__("test-docker-server", "1.0.0")' >> test_docker_server.py
        echo '' >> test_docker_server.py
        echo 'def main():' >> test_docker_server.py
        echo '    server = TestDockerServer()' >> test_docker_server.py
        echo '    server.run()' >> test_docker_server.py
        echo '' >> test_docker_server.py
        echo 'if __name__ == "__main__":' >> test_docker_server.py
        echo '    main()' >> test_docker_server.py
    
    - name: Test Docker cross-platform build (Linux)
      run: |
        mcp-build --platform linux --server test_docker_server.py --no-test
    
    - name: Test Docker cross-platform build (Windows)
      run: |
        mcp-build --platform windows --server test_docker_server.py --no-test
    
    - name: Upload Docker build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mcp-framework-docker-cross-platform
        path: dist/
        retention-days: 30